// <auto-generated />
using System;
using BackEnd.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEnd.Migrations
{
    [DbContext(typeof(SISTEMA_ACADEMICOContext))]
    [Migration("20220725231612_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BackEnd.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BackEnd.Entities.Curso", b =>
                {
                    b.Property<int>("IdCurso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CURSO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCurso"), 1L, 1);

                    b.Property<string>("CodigoCurso")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("CODIGO_CURSO");

                    b.Property<int>("Creditos")
                        .HasColumnType("int")
                        .HasColumnName("CREDITOS");

                    b.Property<string>("Duracion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DURACION");

                    b.Property<string>("Horario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("HORARIO");

                    b.Property<int>("IdPlanEstudioFk")
                        .HasColumnType("int")
                        .HasColumnName("ID_PLAN_ESTUDIO_FK");

                    b.Property<string>("NaturalezaCurso")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NATURALEZA_CURSO");

                    b.Property<string>("NombreCurso")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE_CURSO");

                    b.Property<double>("Precio")
                        .HasColumnType("float")
                        .HasColumnName("PRECIO");

                    b.HasKey("IdCurso")
                        .HasName("PK__CURSO__9B4AE7986ACB66CF");

                    b.HasIndex("IdPlanEstudioFk");

                    b.ToTable("CURSO", (string)null);
                });

            modelBuilder.Entity("BackEnd.Entities.Estudiante", b =>
                {
                    b.Property<int>("IdEstudiante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ESTUDIANTE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstudiante"), 1L, 1);

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("date")
                        .HasColumnName("FECHA_NACIMIENTO");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("GENERO")
                        .IsFixedLength();

                    b.Property<int>("IdPlanEstudioFk")
                        .HasColumnType("int")
                        .HasColumnName("ID_PLAN_ESTUDIO_FK");

                    b.Property<int>("IdTipoUsuarioFk")
                        .HasColumnType("int")
                        .HasColumnName("ID_TIPO_USUARIO_FK");

                    b.Property<int>("IdUsuarioFk")
                        .HasColumnType("int")
                        .HasColumnName("ID_USUARIO_FK");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PRIMER_APELLIDO");

                    b.Property<string>("SegundoApellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SEGUNDO_APELLIDO");

                    b.HasKey("IdEstudiante")
                        .HasName("PK__ESTUDIAN__5598088036A6CE5D");

                    b.HasIndex("IdPlanEstudioFk");

                    b.HasIndex("IdTipoUsuarioFk");

                    b.HasIndex("IdUsuarioFk");

                    b.ToTable("ESTUDIANTE", (string)null);
                });

            modelBuilder.Entity("BackEnd.Entities.Matricula", b =>
                {
                    b.Property<int>("IdMatricula")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_MATRICULA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMatricula"), 1L, 1);

                    b.Property<DateTime>("FechaMatricula")
                        .HasColumnType("date")
                        .HasColumnName("FECHA_MATRICULA");

                    b.Property<int>("IdCursoFk")
                        .HasColumnType("int")
                        .HasColumnName("ID_CURSO_FK");

                    b.Property<int>("IdEstudianteFk")
                        .HasColumnType("int")
                        .HasColumnName("ID_ESTUDIANTE_FK");

                    b.Property<int>("IdPlanEstudioFk")
                        .HasColumnType("int")
                        .HasColumnName("ID_PLAN_ESTUDIO_FK");

                    b.HasKey("IdMatricula")
                        .HasName("PK__MATRICUL__09B08780303982ED");

                    b.HasIndex("IdCursoFk");

                    b.HasIndex("IdEstudianteFk");

                    b.HasIndex("IdPlanEstudioFk");

                    b.ToTable("MATRICULA", (string)null);
                });

            modelBuilder.Entity("BackEnd.Entities.PlanEstudio", b =>
                {
                    b.Property<int>("IdPlanEstudio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PLAN_ESTUDIO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlanEstudio"), 1L, 1);

                    b.Property<string>("NombrePlanEstduio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NOMBRE_PLAN_ESTDUIO");

                    b.HasKey("IdPlanEstudio")
                        .HasName("PK__PLAN_EST__680979317DA2985E");

                    b.ToTable("PLAN_ESTUDIO", (string)null);
                });

            modelBuilder.Entity("BackEnd.Entities.TipoUsuario", b =>
                {
                    b.Property<int>("IdTipoUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TIPO_USUARIO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoUsuario"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DESCRIPCION");

                    b.HasKey("IdTipoUsuario")
                        .HasName("PK__TIPO_USU__85A05968E5C690B5");

                    b.ToTable("TIPO_USUARIO", (string)null);
                });

            modelBuilder.Entity("BackEnd.Entities.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_USUARIO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"), 1L, 1);

                    b.Property<bool>("ConfirmarContrasena")
                        .HasColumnType("bit")
                        .HasColumnName("CONFIRMAR_CONTRASENA");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CONTRASENA");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EMAIL");

                    b.Property<int>("IdTipoUsuarioFk")
                        .HasColumnType("int")
                        .HasColumnName("ID_TIPO_USUARIO_FK");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ROL");

                    b.Property<int>("Telefono")
                        .HasColumnType("int")
                        .HasColumnName("TELEFONO");

                    b.HasKey("IdUsuario")
                        .HasName("PK__USUARIO__91136B906697E81C");

                    b.HasIndex("IdTipoUsuarioFk");

                    b.ToTable("USUARIO", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BackEnd.Entities.Curso", b =>
                {
                    b.HasOne("BackEnd.Entities.PlanEstudio", "IdPlanEstudioFkNavigation")
                        .WithMany("Cursos")
                        .HasForeignKey("IdPlanEstudioFk")
                        .IsRequired()
                        .HasConstraintName("FK__CURSO__ID_PLAN_E__267ABA7A");

                    b.Navigation("IdPlanEstudioFkNavigation");
                });

            modelBuilder.Entity("BackEnd.Entities.Estudiante", b =>
                {
                    b.HasOne("BackEnd.Entities.PlanEstudio", "IdPlanEstudioFkNavigation")
                        .WithMany("Estudiantes")
                        .HasForeignKey("IdPlanEstudioFk")
                        .IsRequired()
                        .HasConstraintName("FK__ESTUDIANT__ID_PL__2F10007B");

                    b.HasOne("BackEnd.Entities.TipoUsuario", "IdTipoUsuarioFkNavigation")
                        .WithMany("Estudiantes")
                        .HasForeignKey("IdTipoUsuarioFk")
                        .IsRequired()
                        .HasConstraintName("FK__ESTUDIANT__ID_TI__300424B4");

                    b.HasOne("BackEnd.Entities.Usuario", "IdUsuarioFkNavigation")
                        .WithMany("Estudiantes")
                        .HasForeignKey("IdUsuarioFk")
                        .IsRequired()
                        .HasConstraintName("FK__ESTUDIANT__ID_US__2E1BDC42");

                    b.Navigation("IdPlanEstudioFkNavigation");

                    b.Navigation("IdTipoUsuarioFkNavigation");

                    b.Navigation("IdUsuarioFkNavigation");
                });

            modelBuilder.Entity("BackEnd.Entities.Matricula", b =>
                {
                    b.HasOne("BackEnd.Entities.Curso", "IdCursoFkNavigation")
                        .WithMany("Matriculas")
                        .HasForeignKey("IdCursoFk")
                        .IsRequired()
                        .HasConstraintName("FK__MATRICULA__ID_CU__34C8D9D1");

                    b.HasOne("BackEnd.Entities.Estudiante", "IdEstudianteFkNavigation")
                        .WithMany("Matriculas")
                        .HasForeignKey("IdEstudianteFk")
                        .IsRequired()
                        .HasConstraintName("FK__MATRICULA__ID_ES__32E0915F");

                    b.HasOne("BackEnd.Entities.PlanEstudio", "IdPlanEstudioFkNavigation")
                        .WithMany("Matriculas")
                        .HasForeignKey("IdPlanEstudioFk")
                        .IsRequired()
                        .HasConstraintName("FK__MATRICULA__ID_PL__33D4B598");

                    b.Navigation("IdCursoFkNavigation");

                    b.Navigation("IdEstudianteFkNavigation");

                    b.Navigation("IdPlanEstudioFkNavigation");
                });

            modelBuilder.Entity("BackEnd.Entities.Usuario", b =>
                {
                    b.HasOne("BackEnd.Entities.TipoUsuario", "IdTipoUsuarioFkNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdTipoUsuarioFk")
                        .IsRequired()
                        .HasConstraintName("FK__USUARIO__ID_TIPO__2B3F6F97");

                    b.Navigation("IdTipoUsuarioFkNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BackEnd.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BackEnd.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BackEnd.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEnd.Entities.Curso", b =>
                {
                    b.Navigation("Matriculas");
                });

            modelBuilder.Entity("BackEnd.Entities.Estudiante", b =>
                {
                    b.Navigation("Matriculas");
                });

            modelBuilder.Entity("BackEnd.Entities.PlanEstudio", b =>
                {
                    b.Navigation("Cursos");

                    b.Navigation("Estudiantes");

                    b.Navigation("Matriculas");
                });

            modelBuilder.Entity("BackEnd.Entities.TipoUsuario", b =>
                {
                    b.Navigation("Estudiantes");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("BackEnd.Entities.Usuario", b =>
                {
                    b.Navigation("Estudiantes");
                });
#pragma warning restore 612, 618
        }
    }
}
